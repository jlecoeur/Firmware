#include "mixer.h"

/**
 * Supported multirotor geometries.
 *
 * Values are generated by the px_generate_mixers.py script and placed to mixer_multirotor_normalized.generated.h
 */
// typedef unsigned int MultirotorGeometryUnderlyingType;
// enum class MultirotorGeometry : MultirotorGeometryUnderlyingType;

/**
 * Multi-rotor mixer for pre-defined vehicle geometries.
 * 
 * Collects six inputs (roll, pitch, yaw, x thrust, y thrust, z thrust) and mixes them to
 * a set of outputs based on the configured geometry.
 */
class __EXPORT MultirotorMixer6dof : public Mixer
{
public:
	/**

	 * Precalculated rotor mix.
	 */
	struct Rotor {
		float	roll_scale;	 /**< scales roll for this rotor */
		float	pitch_scale; /**< scales pitch for this rotor */
		float	yaw_scale;	 /**< scales yaw for this rotor */
		float	x_scale;	 /**< scales x thrust for this rotor */
		float	y_scale;	 /**< scales x thrust for this rotor */
		float	z_scale;	 /**< scales x thrust for this rotor */
	};

	/**
	 * Constructor.
	 *
	 * @param control_cb		Callback invoked to read inputs.
	 * @param cb_handle		Passed to control_cb.
	 * @param geometry		The selected geometry.
	 * @param roll_scale	Scaling factor applied to roll
	 * @param pitch_scale	Scaling factor applied to pitch
	 * @param yaw_wcale		Scaling factor applied to yaw inputs
	 * @param x_wcale		Scaling factor applied to x thrust inputs
	 * @param y_wcale		Scaling factor applied to y thrust inputs
	 * @param z_wcale		Scaling factor applied to z thrust inputs
	 * @param idle_speed	Minimum rotor control output value; usually
	 *				tuned to ensure that rotors never stall at the
	 * 				low end of their control range.
	 */
	MultirotorMixer6dof(ControlCallback control_cb,
			uintptr_t cb_handle,
			MultirotorGeometry geometry,
			float roll_scale,
			float pitch_scale,
			float yaw_scale,
			float x_scale,
			float y_scale,
			float z_scale,
			float idle_speed);
	~MultirotorMixer6dof();

	/**
	 * Factory method.
	 *
	 * Given a pointer to a buffer containing a text description of the mixer,
	 * returns a pointer to a new instance of the mixer.
	 *
	 * @param control_cb		The callback to invoke when fetching a
	 *				control value.
	 * @param cb_handle		Handle passed to the control callback.
	 * @param buf			Buffer containing a text description of
	 *				the mixer.
	 * @param buflen		Length of the buffer in bytes, adjusted
	 *				to reflect the bytes consumed.
	 * @return			A new MultirotorMixer6dof instance, or nullptr
	 *				if the text format is bad.
	 */
	static MultirotorMixer6dof		*from_text(Mixer::ControlCallback control_cb, uintptr_t cb_handle, const char *buf,
			unsigned &buflen);

	virtual unsigned		mix(float *outputs, unsigned space);
	virtual uint16_t		get_saturation_status(void);
	virtual void			groups_required(uint32_t &groups);

	/**
	 * @brief      Update slew rate parameter. This tells the multicopter mixer
	 *             the maximum allowed change of the output values per cycle.
	 *             The value is only valid for one cycle, in order to have continuous
	 *             slew rate limiting this function needs to be called before every call
	 *             to mix().
	 *
	 * @param[in]  delta_out_max  Maximum delta output.
	 *
	 */
	virtual void 			set_max_delta_out_once(float delta_out_max) { _delta_out_max = delta_out_max; }

	unsigned set_trim(float trim)
	{
		return _rotor_count;
	}

	/**
	 * @brief      Sets the thrust factor used to calculate mapping from desired thrust to pwm.
	 *
	 * @param[in]  val   The value
	 */
	virtual void			set_thrust_factor(float val) {_thrust_factor = val;}

	union saturation_status {
		struct {
			uint16_t valid			: 1; // 0 - true when the saturation status is used
			uint16_t motor_pos		: 1; // 1 - true when any motor has saturated in the positive direction
			uint16_t motor_neg		: 1; // 2 - true when any motor has saturated in the negative direction
			uint16_t roll_pos		: 1; // 3 - true when a positive roll demand change will increase saturation
			uint16_t roll_neg		: 1; // 4 - true when a negative roll demand change will increase saturation
			uint16_t pitch_pos		: 1; // 5 - true when a positive pitch demand change will increase saturation
			uint16_t pitch_neg		: 1; // 6 - true when a negative pitch demand change will increase saturation
			uint16_t yaw_pos		: 1; // 7 - true when a positive yaw demand change will increase saturation
			uint16_t yaw_neg		: 1; // 8 - true when a negative yaw demand change will increase saturation
			uint16_t x_thrust_pos	: 1; // 9 - true when a positive x thrust demand change will increase saturation
			uint16_t x_thrust_neg	: 1; //10 - true when a negative x thrust demand change will increase saturation
			uint16_t y_thrust_pos	: 1; //11 - true when a positive y thrust demand change will increase saturation
			uint16_t y_thrust_neg	: 1; //12 - true when a negative y thrust demand change will increase saturation
			uint16_t z_thrust_pos	: 1; //13 - true when a positive z thrust demand change will increase saturation
			uint16_t z_thrust_neg	: 1; //14 - true when a negative z thrust demand change will increase saturation
		} flags;
		uint16_t value;
	};

private:
	float				_roll_scale;
	float				_pitch_scale;
	float				_yaw_scale;
	float				_x_scale;
	float				_y_scale;
	float				_z_scale;
	float				_idle_speed;
	float 				_delta_out_max;
	float 				_thrust_factor;

	void update_saturation_status(unsigned index, bool clipping_high, bool clipping_low);
	saturation_status _saturation_status;

	unsigned			_rotor_count;
	const Rotor			*_rotors;

	float 				*_outputs_prev = nullptr;

	/* do not allow to copy due to ptr data members */
	MultirotorMixer6dof(const MultirotorMixer6dof &);
	MultirotorMixer6dof operator=(const MultirotorMixer6dof &);
};
